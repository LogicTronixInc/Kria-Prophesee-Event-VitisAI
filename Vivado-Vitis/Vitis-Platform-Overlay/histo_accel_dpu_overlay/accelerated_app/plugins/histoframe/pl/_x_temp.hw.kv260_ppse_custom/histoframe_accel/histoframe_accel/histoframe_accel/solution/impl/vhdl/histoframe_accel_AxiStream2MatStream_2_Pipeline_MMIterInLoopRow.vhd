-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity histoframe_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    ldata1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ldata1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    in_mat_data1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_full_n : IN STD_LOGIC;
    in_mat_data1_write : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln1033 : IN STD_LOGIC_VECTOR (4 downto 0);
    cols_bound_per_npc_load : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    last_blk_width_load : IN STD_LOGIC_VECTOR (3 downto 0);
    sub5 : IN STD_LOGIC_VECTOR (7 downto 0);
    add_ln1033 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of histoframe_accel_AxiStream2MatStream_2_Pipeline_MMIterInLoopRow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln1013_reg_770 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1013_reg_770_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1024_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op108_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln1044_reg_787 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1044_reg_787_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1013_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_mat_data1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1013_reg_770_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_774 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_774_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_774_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xf_bits_per_clock_fu_220_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xf_bits_per_clock_reg_781 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1044_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1044_reg_787_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1024_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1024_reg_791_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln628_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln628_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln628_fu_309_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln628_reg_802 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln628_1_fu_313_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln628_1_reg_810 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1025_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1025_reg_816 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln628_fu_342_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln628_reg_821 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln368_fu_348_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln368_reg_827 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln628_1_fu_372_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln628_1_reg_832 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln368_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln368_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln368_fu_384_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln368_reg_843 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln368_fu_434_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln368_reg_849 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_V_6_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_662_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_localbuffer_V_8_phi_fu_168_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_3_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_98 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln1013_fu_209_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_106 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1013_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1045_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ptr_width_minus_fu_265_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1019_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1033_fu_281_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1033_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1033_1_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1033_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1026_fu_334_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1026_1_fu_338_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1019_1_fu_262_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1030_fu_354_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1030_1_fu_364_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1030_fu_368_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1030_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_1_fu_388_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln368_fu_392_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln368_1_fu_400_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln368_1_fu_408_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln368_2_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln368_3_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln368_1_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln368_1_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1020_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln628_2_fu_464_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln628_3_fu_473_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_454_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln628_1_fu_468_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_fu_477_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_2_fu_491_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln628_2_fu_497_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln628_1_fu_484_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_3_fu_503_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_4_fu_507_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_3_fu_511_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_4_fu_517_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_4_fu_523_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_fu_533_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln628_1_fu_536_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_fu_539_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_1_fu_545_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_551_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln368_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln368_fu_564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_570_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln628_fu_583_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln628_2_fu_588_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln628_2_fu_592_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_2_fu_598_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln368_fu_608_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln368_2_fu_613_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_604_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln368_1_fu_619_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln368_fu_623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_629_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_V_fu_576_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln368_2_fu_646_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln368_3_fu_639_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln368_1_fu_651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln368_2_fu_657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln628_2_fu_673_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln628_3_fu_676_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln628_5_fu_682_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln628_5_fu_686_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1018_fu_692_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_637 : BOOLEAN;
    signal ap_condition_641 : BOOLEAN;
    signal ap_condition_644 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component histoframe_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component histoframe_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln1024_reg_791 = ap_const_lv1_0) and (icmp_ln1013_reg_770_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_165 <= localbuffer_V_6_fu_529_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165;
                end if;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv31_0;
                elsif (((icmp_ln1013_fu_204_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_98 <= add_ln1013_fu_209_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln1013_fu_204_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_102 <= j_5_fu_238_p3;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_Val2_s_fu_106 <= ap_const_lv128_lc_1;
                elsif ((ap_const_boolean_1 = ap_condition_637)) then 
                    p_Val2_s_fu_106 <= ldata1_dout;
                end if;
            end if; 
        end if;
    end process;

    rem_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    rem_fu_94 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_644)) then 
                    rem_fu_94 <= rem_2_fu_440_p2;
                elsif ((ap_const_boolean_1 = ap_condition_641)) then 
                    rem_fu_94 <= rem_3_fu_317_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1013_reg_770 = ap_const_lv1_1) and (icmp_ln1024_fu_275_p2 = ap_const_lv1_1))) then
                and_ln368_reg_849 <= and_ln368_fu_434_p2;
                icmp_ln1025_reg_816 <= icmp_ln1025_fu_328_p2;
                icmp_ln368_reg_837 <= icmp_ln368_fu_378_p2;
                sub_ln368_reg_827 <= sub_ln368_fu_348_p2;
                sub_ln628_1_reg_832 <= sub_ln628_1_fu_372_p2;
                sub_ln628_reg_821 <= sub_ln628_fu_342_p2;
                trunc_ln368_reg_843 <= trunc_ln368_fu_384_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln1013_reg_770 <= icmp_ln1013_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                bLast_width_reg_774_pp0_iter2_reg <= bLast_width_reg_774;
                bLast_width_reg_774_pp0_iter3_reg <= bLast_width_reg_774_pp0_iter2_reg;
                icmp_ln1013_reg_770_pp0_iter2_reg <= icmp_ln1013_reg_770;
                icmp_ln1013_reg_770_pp0_iter3_reg <= icmp_ln1013_reg_770_pp0_iter2_reg;
                icmp_ln1024_reg_791_pp0_iter3_reg <= icmp_ln1024_reg_791;
                icmp_ln1044_reg_787_pp0_iter2_reg <= icmp_ln1044_reg_787;
                icmp_ln1044_reg_787_pp0_iter3_reg <= icmp_ln1044_reg_787_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_165 <= ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1013_fu_204_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bLast_width_reg_774 <= bLast_width_fu_215_p2;
                icmp_ln1044_reg_787 <= icmp_ln1044_fu_227_p2;
                xf_bits_per_clock_reg_781 <= xf_bits_per_clock_fu_220_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1013_reg_770 = ap_const_lv1_1))) then
                icmp_ln1024_reg_791 <= icmp_ln1024_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1013_reg_770 = ap_const_lv1_1) and (icmp_ln1024_fu_275_p2 = ap_const_lv1_0))) then
                icmp_ln628_reg_795 <= icmp_ln628_fu_303_p2;
                trunc_ln628_1_reg_810 <= trunc_ln628_1_fu_313_p1;
                trunc_ln628_reg_802 <= trunc_ln628_fu_309_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1024_reg_791 = ap_const_lv1_1) and (icmp_ln1013_reg_770_pp0_iter2_reg = ap_const_lv1_1))) then
                p_Result_3_reg_860 <= p_Result_3_fu_662_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1013_fu_209_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv31_1));
    add_ln1030_fu_354_p2 <= std_logic_vector(unsigned(zext_ln1019_1_fu_262_p1) + unsigned(ap_const_lv5_1F));
    add_ln1045_fu_232_p2 <= std_logic_vector(unsigned(j_fu_102) + unsigned(ap_const_lv32_1));
    and_ln368_1_fu_651_p2 <= (xor_ln368_2_fu_646_p2 and localbuffer_V_fu_576_p3);
    and_ln368_2_fu_657_p2 <= (select_ln368_3_fu_639_p3 and and_ln368_reg_849);
    and_ln368_fu_434_p2 <= (shl_ln368_1_fu_422_p2 and lshr_ln368_1_fu_428_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ldata1_empty_n, ap_predicate_op108_read_state4, in_mat_data1_full_n, icmp_ln1044_reg_787_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1044_reg_787_pp0_iter3_reg = ap_const_lv1_1) and (in_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_predicate_op108_read_state4 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ldata1_empty_n, ap_predicate_op108_read_state4, in_mat_data1_full_n, icmp_ln1044_reg_787_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1044_reg_787_pp0_iter3_reg = ap_const_lv1_1) and (in_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_predicate_op108_read_state4 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ldata1_empty_n, ap_predicate_op108_read_state4, in_mat_data1_full_n, icmp_ln1044_reg_787_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1044_reg_787_pp0_iter3_reg = ap_const_lv1_1) and (in_mat_data1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_predicate_op108_read_state4 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(ldata1_empty_n, ap_predicate_op108_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((ap_predicate_op108_read_state4 = ap_const_boolean_1) and (ldata1_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(in_mat_data1_full_n, icmp_ln1044_reg_787_pp0_iter3_reg)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((icmp_ln1044_reg_787_pp0_iter3_reg = ap_const_lv1_1) and (in_mat_data1_full_n = ap_const_logic_0));
    end process;


    ap_condition_637_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1013_reg_770_pp0_iter2_reg, icmp_ln1024_reg_791)
    begin
                ap_condition_637 <= ((icmp_ln1024_reg_791 = ap_const_lv1_1) and (icmp_ln1013_reg_770_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_641_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1013_reg_770, icmp_ln1024_fu_275_p2)
    begin
                ap_condition_641 <= ((icmp_ln1013_reg_770 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1024_fu_275_p2 = ap_const_lv1_0));
    end process;


    ap_condition_644_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1013_reg_770, icmp_ln1024_fu_275_p2)
    begin
                ap_condition_644 <= ((icmp_ln1013_reg_770 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1024_fu_275_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1013_fu_204_p2)
    begin
        if (((icmp_ln1013_fu_204_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1013_reg_770, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1013_reg_770 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_localbuffer_V_8_phi_fu_168_p4_assign_proc : process(icmp_ln1013_reg_770_pp0_iter3_reg, icmp_ln1024_reg_791_pp0_iter3_reg, p_Result_3_reg_860, ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_165)
    begin
        if (((icmp_ln1024_reg_791_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln1013_reg_770_pp0_iter3_reg = ap_const_lv1_1))) then 
            ap_phi_mux_localbuffer_V_8_phi_fu_168_p4 <= p_Result_3_reg_860;
        else 
            ap_phi_mux_localbuffer_V_8_phi_fu_168_p4 <= ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_165;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_165 <= "XXXXXXXX";

    ap_predicate_op108_read_state4_assign_proc : process(icmp_ln1013_reg_770_pp0_iter2_reg, icmp_ln1024_reg_791)
    begin
                ap_predicate_op108_read_state4 <= ((icmp_ln1024_reg_791 = ap_const_lv1_1) and (icmp_ln1013_reg_770_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bLast_width_fu_215_p2 <= "1" when (j_fu_102 = sub) else "0";
    icmp_ln1013_fu_204_p2 <= "1" when (signed(zext_ln1013_fu_200_p1) < signed(bound)) else "0";
    icmp_ln1024_fu_275_p2 <= "1" when (signed(zext_ln1019_fu_259_p1) > signed(rem_fu_94)) else "0";
    icmp_ln1025_fu_328_p2 <= "1" when (rem_fu_94 = ap_const_lv32_0) else "0";
    icmp_ln1044_fu_227_p2 <= "1" when (signed(j_fu_102) < signed(cols_bound_per_npc_load)) else "0";
    icmp_ln368_fu_378_p2 <= "1" when (unsigned(rem_fu_94) > unsigned(sext_ln1030_fu_360_p1)) else "0";
    icmp_ln628_fu_303_p2 <= "1" when (unsigned(sub_ln1033_1_fu_297_p2) > unsigned(sub_ln1033_fu_291_p2)) else "0";

    in_mat_data1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, in_mat_data1_full_n, icmp_ln1044_reg_787_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1044_reg_787_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_mat_data1_blk_n <= in_mat_data1_full_n;
        else 
            in_mat_data1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_mat_data1_din <= (select_ln1018_fu_692_p3 and ap_phi_mux_localbuffer_V_8_phi_fu_168_p4);

    in_mat_data1_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln1044_reg_787_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1044_reg_787_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            in_mat_data1_write <= ap_const_logic_1;
        else 
            in_mat_data1_write <= ap_const_logic_0;
        end if; 
    end process;

    j_5_fu_238_p3 <= 
        ap_const_lv32_0 when (bLast_width_fu_215_p2(0) = '1') else 
        add_ln1045_fu_232_p2;

    ldata1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ldata1_empty_n, ap_predicate_op108_read_state4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op108_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op108_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op108_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_V_6_fu_529_p1 <= p_Result_4_fu_523_p2(8 - 1 downto 0);
    localbuffer_V_fu_576_p3 <= 
        ap_const_lv8_0 when (icmp_ln1025_reg_816(0) = '1') else 
        p_Result_1_fu_570_p2;
    lshr_ln368_1_fu_428_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln368_3_fu_418_p1(8-1 downto 0)))));
    lshr_ln368_fu_564_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln368_fu_561_p1(8-1 downto 0)))));
    lshr_ln628_1_fu_545_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln628_1_fu_536_p1(31-1 downto 0)))));
    lshr_ln628_2_fu_592_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln628_2_fu_588_p1(31-1 downto 0)))));
    lshr_ln628_3_fu_511_p2 <= std_logic_vector(shift_right(unsigned(select_ln628_1_fu_484_p3),to_integer(unsigned('0' & zext_ln628_3_fu_503_p1(31-1 downto 0)))));
    lshr_ln628_4_fu_517_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln628_4_fu_507_p1(31-1 downto 0)))));
    lshr_ln628_5_fu_686_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln628_5_fu_682_p1(8-1 downto 0)))));
    lshr_ln628_fu_539_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_s_fu_106),to_integer(unsigned('0' & zext_ln628_fu_533_p1(31-1 downto 0)))));
    p_Result_1_fu_570_p2 <= (tmp_2_fu_557_p1 and lshr_ln368_fu_564_p2);
    p_Result_2_fu_598_p2 <= (lshr_ln628_2_fu_592_p2 and ldata1_dout);
    p_Result_3_fu_662_p2 <= (and_ln368_2_fu_657_p2 or and_ln368_1_fu_651_p2);
    p_Result_4_fu_523_p2 <= (lshr_ln628_4_fu_517_p2 and lshr_ln628_3_fu_511_p2);
    p_Result_s_fu_551_p2 <= (lshr_ln628_fu_539_p2 and lshr_ln628_1_fu_545_p2);
    ptr_width_minus_fu_265_p3 <= 
        sub5 when (bLast_width_reg_774(0) = '1') else 
        ap_const_lv8_78;
    rem_2_fu_440_p2 <= std_logic_vector(unsigned(rem_fu_94) + unsigned(zext_ln1020_fu_271_p1));
    rem_3_fu_317_p2 <= std_logic_vector(unsigned(rem_fu_94) - unsigned(zext_ln1019_fu_259_p1));
    select_ln1018_fu_692_p3 <= 
        lshr_ln628_5_fu_686_p2 when (bLast_width_reg_774_pp0_iter3_reg(0) = '1') else 
        ap_const_lv8_FF;
    select_ln1033_fu_281_p3 <= 
        add_ln1033 when (bLast_width_reg_774(0) = '1') else 
        ap_const_lv8_87;
    select_ln368_1_fu_400_p3 <= 
        trunc_ln368_1_fu_388_p1 when (icmp_ln368_fu_378_p2(0) = '1') else 
        trunc_ln368_fu_384_p1;
    select_ln368_2_fu_613_p3 <= 
        xor_ln368_fu_608_p2 when (icmp_ln368_reg_837(0) = '1') else 
        trunc_ln368_reg_843;
    select_ln368_3_fu_639_p3 <= 
        tmp_fu_629_p4 when (icmp_ln368_reg_837(0) = '1') else 
        shl_ln368_fu_623_p2;
    select_ln368_fu_392_p3 <= 
        trunc_ln368_fu_384_p1 when (icmp_ln368_fu_378_p2(0) = '1') else 
        trunc_ln368_1_fu_388_p1;
    select_ln628_1_fu_484_p3 <= 
        tmp_1_fu_454_p4 when (icmp_ln628_reg_795(0) = '1') else 
        p_Val2_s_fu_106;
    select_ln628_2_fu_491_p3 <= 
        xor_ln628_1_fu_468_p2 when (icmp_ln628_reg_795(0) = '1') else 
        trunc_ln628_reg_802;
    select_ln628_fu_477_p3 <= 
        sub_ln628_2_fu_464_p2 when (icmp_ln628_reg_795(0) = '1') else 
        sub_ln628_3_fu_473_p2;
        sext_ln1030_1_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1030_fu_354_p2),7));

        sext_ln1030_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1030_fu_354_p2),32));

    shl_ln368_1_fu_422_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln368_2_fu_414_p1(8-1 downto 0)))));
    shl_ln368_fu_623_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_fu_604_p1),to_integer(unsigned('0' & zext_ln368_1_fu_619_p1(8-1 downto 0)))));
    sub_ln1033_1_fu_297_p2 <= std_logic_vector(unsigned(ap_const_lv32_80) - unsigned(rem_fu_94));
    sub_ln1033_fu_291_p2 <= std_logic_vector(unsigned(zext_ln1033_fu_287_p1) - unsigned(rem_fu_94));
    sub_ln368_fu_348_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln1026_1_fu_338_p1));
    sub_ln628_1_fu_372_p2 <= std_logic_vector(signed(sext_ln1030_1_fu_364_p1) - signed(trunc_ln1030_fu_368_p1));
    sub_ln628_2_fu_464_p2 <= std_logic_vector(unsigned(trunc_ln628_reg_802) - unsigned(trunc_ln628_1_reg_810));
    sub_ln628_3_fu_473_p2 <= std_logic_vector(unsigned(trunc_ln628_1_reg_810) - unsigned(trunc_ln628_reg_802));
    sub_ln628_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(trunc_ln1026_fu_334_p1));
    
    tmp_1_fu_454_p4_proc : process(p_Val2_s_fu_106)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_1_fu_454_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_106;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_1_fu_454_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_1_fu_454_p4_i) := p_Val2_s_fu_106(128-1-tmp_1_fu_454_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_454_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_2_fu_557_p1 <= p_Result_s_fu_551_p2(8 - 1 downto 0);
    tmp_3_fu_604_p1 <= p_Result_2_fu_598_p2(8 - 1 downto 0);
    
    tmp_fu_629_p4_proc : process(shl_ln368_fu_623_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_fu_629_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln368_fu_623_p2;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_fu_629_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_fu_629_p4_i) := shl_ln368_fu_623_p2(8-1-tmp_fu_629_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_629_p4 <= resvalue(8-1 downto 0);
    end process;

    trunc_ln1026_1_fu_338_p1 <= rem_fu_94(3 - 1 downto 0);
    trunc_ln1026_fu_334_p1 <= rem_fu_94(7 - 1 downto 0);
    trunc_ln1030_fu_368_p1 <= rem_fu_94(7 - 1 downto 0);
    trunc_ln368_1_fu_388_p1 <= add_ln1030_fu_354_p2(3 - 1 downto 0);
    trunc_ln368_fu_384_p1 <= rem_fu_94(3 - 1 downto 0);
    trunc_ln628_1_fu_313_p1 <= sub_ln1033_fu_291_p2(7 - 1 downto 0);
    trunc_ln628_2_fu_673_p1 <= sext_ln1033(3 - 1 downto 0);
    trunc_ln628_fu_309_p1 <= sub_ln1033_1_fu_297_p2(7 - 1 downto 0);
    xf_bits_per_clock_fu_220_p3 <= 
        last_blk_width_load when (bLast_width_fu_215_p2(0) = '1') else 
        ap_const_lv4_8;
    xor_ln368_1_fu_408_p2 <= (select_ln368_fu_392_p3 xor ap_const_lv3_7);
    xor_ln368_2_fu_646_p2 <= (ap_const_lv8_FF xor and_ln368_reg_849);
    xor_ln368_fu_608_p2 <= (trunc_ln368_reg_843 xor ap_const_lv3_7);
    xor_ln628_1_fu_468_p2 <= (trunc_ln628_reg_802 xor ap_const_lv7_7F);
    xor_ln628_2_fu_497_p2 <= (select_ln628_fu_477_p3 xor ap_const_lv7_7F);
    xor_ln628_3_fu_676_p2 <= (trunc_ln628_2_fu_673_p1 xor ap_const_lv3_7);
    xor_ln628_fu_583_p2 <= (sub_ln628_1_reg_832 xor ap_const_lv7_7F);
    zext_ln1013_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_98),32));
    zext_ln1019_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_reg_781),5));
    zext_ln1019_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_reg_781),32));
    zext_ln1020_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_width_minus_fu_265_p3),32));
    zext_ln1033_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1033_fu_281_p3),32));
    zext_ln368_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_2_fu_613_p3),8));
    zext_ln368_2_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln368_1_fu_400_p3),8));
    zext_ln368_3_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln368_1_fu_408_p2),8));
    zext_ln368_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln368_reg_827),8));
    zext_ln628_1_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln628_reg_821),128));
    zext_ln628_2_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_fu_583_p2),128));
    zext_ln628_3_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln628_2_fu_491_p3),128));
    zext_ln628_4_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_2_fu_497_p2),128));
    zext_ln628_5_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_3_fu_676_p2),8));
    zext_ln628_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln628_reg_821),128));
end behav;
