-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity histoframe_accel_histoframe_0_9_720_2560_720_1280_1_2_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    p_src_rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    p_src_rows_empty_n : IN STD_LOGIC;
    p_src_rows_read : OUT STD_LOGIC;
    p_src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    p_src_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    p_src_cols_empty_n : IN STD_LOGIC;
    p_src_cols_read : OUT STD_LOGIC;
    in_mat_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in_mat_data1_empty_n : IN STD_LOGIC;
    in_mat_data1_read : OUT STD_LOGIC;
    out_mat_data2_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_mat_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    out_mat_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    out_mat_data2_full_n : IN STD_LOGIC;
    out_mat_data2_write : OUT STD_LOGIC );
end;


architecture behav of histoframe_accel_histoframe_0_9_720_2560_720_1280_1_2_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_rows_blk_n : STD_LOGIC;
    signal p_src_cols_blk_n : STD_LOGIC;
    signal cols_reg_69 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_reg_75 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_62_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start : STD_LOGIC;
    signal grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done : STD_LOGIC;
    signal grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_idle : STD_LOGIC;
    signal grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_ready : STD_LOGIC;
    signal grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_in_mat_data1_read : STD_LOGIC;
    signal grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_out_mat_data2_din : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_out_mat_data2_write : STD_LOGIC;
    signal grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_62_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_62_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal grp_fu_62_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_62_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component histoframe_accel_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_mat_data1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_mat_data1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in_mat_data1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in_mat_data1_empty_n : IN STD_LOGIC;
        in_mat_data1_read : OUT STD_LOGIC;
        out_mat_data2_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_mat_data2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        out_mat_data2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        out_mat_data2_full_n : IN STD_LOGIC;
        out_mat_data2_write : OUT STD_LOGIC;
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        bound : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component histoframe_accel_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46 : component histoframe_accel_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start,
        ap_done => grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done,
        ap_idle => grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_idle,
        ap_ready => grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_ready,
        in_mat_data1_dout => in_mat_data1_dout,
        in_mat_data1_num_data_valid => ap_const_lv2_0,
        in_mat_data1_fifo_cap => ap_const_lv2_0,
        in_mat_data1_empty_n => in_mat_data1_empty_n,
        in_mat_data1_read => grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_in_mat_data1_read,
        out_mat_data2_din => grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_out_mat_data2_din,
        out_mat_data2_num_data_valid => ap_const_lv2_0,
        out_mat_data2_fifo_cap => ap_const_lv2_0,
        out_mat_data2_full_n => out_mat_data2_full_n,
        out_mat_data2_write => grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_out_mat_data2_write,
        cols => cols_reg_69,
        bound => bound_reg_90);

    mul_32ns_32ns_64_2_1_U73 : component histoframe_accel_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_62_p0,
        din1 => grp_fu_62_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_62_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_ready = ap_const_logic_1)) then 
                    grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_90 <= grp_fu_62_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cols_reg_69 <= p_src_cols_dout;
                rows_reg_75 <= p_src_rows_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_rows_empty_n, p_src_cols_empty_n, grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, p_src_rows_empty_n, p_src_cols_empty_n)
    begin
        if (((ap_start = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done)
    begin
        if ((grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_rows_empty_n, p_src_cols_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_62_p0 <= grp_fu_62_p00(32 - 1 downto 0);
    grp_fu_62_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_reg_75),64));
    grp_fu_62_p1 <= grp_fu_62_p10(32 - 1 downto 0);
    grp_fu_62_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_reg_69),64));
    grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start <= grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_ap_start_reg;

    in_mat_data1_read_assign_proc : process(grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_in_mat_data1_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_mat_data1_read <= grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_in_mat_data1_read;
        else 
            in_mat_data1_read <= ap_const_logic_0;
        end if; 
    end process;

    out_mat_data2_din <= grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_out_mat_data2_din;

    out_mat_data2_write_assign_proc : process(grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_out_mat_data2_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_mat_data2_write <= grp_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_fu_46_out_mat_data2_write;
        else 
            out_mat_data2_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_blk_n <= p_src_cols_empty_n;
        else 
            p_src_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n, p_src_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_read <= ap_const_logic_1;
        else 
            p_src_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_blk_n <= p_src_rows_empty_n;
        else 
            p_src_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_empty_n, p_src_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_cols_empty_n = ap_const_logic_0) or (p_src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_read <= ap_const_logic_1;
        else 
            p_src_rows_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
