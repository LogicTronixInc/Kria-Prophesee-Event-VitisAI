// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module histoframe_accel_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_mat_data1_dout,
        in_mat_data1_num_data_valid,
        in_mat_data1_fifo_cap,
        in_mat_data1_empty_n,
        in_mat_data1_read,
        out_mat_data2_din,
        out_mat_data2_num_data_valid,
        out_mat_data2_fifo_cap,
        out_mat_data2_full_n,
        out_mat_data2_write,
        cols,
        bound
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_mat_data1_dout;
input  [1:0] in_mat_data1_num_data_valid;
input  [1:0] in_mat_data1_fifo_cap;
input   in_mat_data1_empty_n;
output   in_mat_data1_read;
output  [23:0] out_mat_data2_din;
input  [1:0] out_mat_data2_num_data_valid;
input  [1:0] out_mat_data2_fifo_cap;
input   out_mat_data2_full_n;
output   out_mat_data2_write;
input  [31:0] cols;
input  [63:0] bound;

reg ap_idle;
reg in_mat_data1_read;
reg out_mat_data2_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] trunc_ln28_reg_258;
reg   [0:0] trunc_ln28_reg_258_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_126_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_mat_data1_blk_n;
wire    ap_block_pp0_stage0;
reg    out_mat_data2_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln28_fu_145_p1;
reg   [7:0] t_reg_264;
reg   [7:0] o_fu_50;
wire   [7:0] o_2_fu_181_p3;
wire    ap_loop_init;
reg   [7:0] e_fu_54;
wire   [7:0] e_2_fu_188_p3;
reg   [30:0] j_fu_58;
wire   [30:0] j_3_fu_149_p2;
reg   [63:0] indvar_flatten_fu_62;
wire   [63:0] add_ln26_fu_131_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln28_fu_117_p1;
wire   [0:0] icmp_ln28_fu_121_p2;
wire   [30:0] select_ln23_fu_137_p3;
wire   [7:0] shl_ln39_fu_171_p2;
wire   [7:0] e_3_fu_176_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

histoframe_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            e_fu_54 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            e_fu_54 <= e_2_fu_188_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 64'd0;
        end else if (((icmp_ln26_fu_126_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_62 <= add_ln26_fu_131_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 31'd0;
        end else if (((icmp_ln26_fu_126_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_58 <= j_3_fu_149_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            o_fu_50 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            o_fu_50 <= o_2_fu_181_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        t_reg_264 <= in_mat_data1_dout;
        trunc_ln28_reg_258_pp0_iter2_reg <= trunc_ln28_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_126_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln28_reg_258 <= trunc_ln28_fu_145_p1;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_126_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_mat_data1_blk_n = in_mat_data1_empty_n;
    end else begin
        in_mat_data1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_mat_data1_read = 1'b1;
    end else begin
        in_mat_data1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (trunc_ln28_reg_258_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_mat_data2_blk_n = out_mat_data2_full_n;
    end else begin
        out_mat_data2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln28_reg_258_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_mat_data2_write = 1'b1;
    end else begin
        out_mat_data2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_131_p2 = (indvar_flatten_fu_62 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((trunc_ln28_reg_258_pp0_iter2_reg == 1'd0) & (out_mat_data2_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((in_mat_data1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((trunc_ln28_reg_258_pp0_iter2_reg == 1'd0) & (out_mat_data2_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((in_mat_data1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((trunc_ln28_reg_258_pp0_iter2_reg == 1'd0) & (out_mat_data2_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((in_mat_data1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (in_mat_data1_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((trunc_ln28_reg_258_pp0_iter2_reg == 1'd0) & (out_mat_data2_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign e_2_fu_188_p3 = ((trunc_ln28_reg_258_pp0_iter2_reg[0:0] == 1'b1) ? e_fu_54 : e_3_fu_176_p2);

assign e_3_fu_176_p2 = (t_reg_264 + shl_ln39_fu_171_p2);

assign icmp_ln26_fu_126_p2 = ((indvar_flatten_fu_62 == bound) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_121_p2 = (($signed(zext_ln28_fu_117_p1) < $signed(cols)) ? 1'b1 : 1'b0);

assign j_3_fu_149_p2 = (select_ln23_fu_137_p3 + 31'd1);

assign o_2_fu_181_p3 = ((trunc_ln28_reg_258_pp0_iter2_reg[0:0] == 1'b1) ? e_3_fu_176_p2 : o_fu_50);

assign out_mat_data2_din = {{{e_2_fu_188_p3}, {o_2_fu_181_p3}}, {8'd0}};

assign select_ln23_fu_137_p3 = ((icmp_ln28_fu_121_p2[0:0] == 1'b1) ? j_fu_58 : 31'd0);

assign shl_ln39_fu_171_p2 = t_reg_264 << 8'd4;

assign trunc_ln28_fu_145_p1 = select_ln23_fu_137_p3[0:0];

assign zext_ln28_fu_117_p1 = j_fu_58;

endmodule //histoframe_accel_histoframe_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2
